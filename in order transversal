#include <stdio.h>
#include <stdlib.h>

// Define the structure for a binary tree node
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new tree node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function for in-order traversal of the binary tree
void inOrderTraversal(Node* root) {
    if (root != NULL) {
        inOrderTraversal(root->left);    // Traverse left subtree
        printf("%d ", root->data);       // Visit root node
        inOrderTraversal(root->right);   // Traverse right subtree
    }
}

// Main function to demonstrate the traversal
int main() {
    Node* root = createNode(4);
    root->left = createNode(2);
    root->right = createNode(6);
    root->left->left = createNode(1);
    root->left->right = createNode(3);
    root->right->left = createNode(5);
    root->right->right = createNode(7);

    printf("In-Order Traversal: ");
    inOrderTraversal(root);   // Perform in-order traversal
    printf("\n");

    // Free allocated memory (not shown here for simplicity)
    return 0;
}
