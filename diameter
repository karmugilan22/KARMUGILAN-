#include <stdio.h>
#include <stdlib.h>

// Definition of a binary tree node
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Helper function to find the height and diameter of the binary tree
int heightAndDiameter(Node* root, int* diameter) {
    if (root == NULL) return 0;
    
    int leftHeight = heightAndDiameter(root->left, diameter);
    int rightHeight = heightAndDiameter(root->right, diameter);
    
    // Update diameter if this path is longer
    int currentDiameter = leftHeight + rightHeight + 1;
    if (currentDiameter > *diameter) *diameter = currentDiameter;
    
    return (leftHeight > rightHeight ? leftHeight : rightHeight) + 1;
}

// Function to calculate the diameter of the binary tree
int diameter(Node* root) {
    int diameter = 0;
    heightAndDiameter(root, &diameter);
    return diameter;
}

int main() {
    Node* root = newNode(10);
    root->left = newNode(5);
    root->right = newNode(20);
    root->left->left = newNode(3);
    root->left->right = newNode(8);
    root->right->left = newNode(15);
    root->right->right = newNode(25);
    
    printf("Diameter of the tree: %d\n", diameter(root));
    
    return 0;
}
